import "tfplan"

# Get an array of all resources of the given type (or an empty array).
get_resources = func(type) {
	if length(tfplan.module_paths else []) > 0 { # always true in the real tfplan import
		return get_resources_all_modules(type)
	} else { # fallback for tests
		return get_resources_root_only(type)
	}
}

get_resources_root_only = func(type) {
	resources = []
	named_and_counted_resources = tfplan.resources[type] else {}
	# Get resource bodies out of nested resource maps, from:
	# {"name": {"0": {"applied": {...}, "diff": {...} }, "1": {...}}, "name": {...}}
	# to:
	# [{"applied": {...}, "diff": {...}}, {"applied": {...}, "diff": {...}}, ...]
	for named_and_counted_resources as _, instances {
		for instances as _, body {
			append(resources, body)
		}
	}
	return resources
}

get_resources_all_modules = func(type) {
	resources = []
	for tfplan.module_paths as path {
		named_and_counted_resources = tfplan.module(path).resources[type] else {}
		# Get resource bodies out of nested resource maps, from:
		# {"name": {"0": {"applied": {...}, "diff": {...} }, "1": {...}}, "name": {...}}
		# to:
		# [{"applied": {...}, "diff": {...}}, {"applied": {...}, "diff": {...}}, ...]
		for named_and_counted_resources as _, instances {
			for instances as _, body {
				append(resources, body)
			}
		}
	}
	return resources
}

redirect_status_code = "HTTP_301"

type_redirect = "redirect"

default_action = rule {
	all get_resources("aws_lb_listener") as ln {
		all ln.applied.default_action as action {
		  # print(action.redirect)
		  all action.redirect as rdir {
			  # print(rdir.status_code)
				rdir.status_code == redirect_status_code
			}
		}
	}
}

default_action_redirect = rule {
	all get_resources("aws_lb_listener") as ln {
		all ln.applied.default_action as action {
			# print(action.type)
			action.type == type_redirect
		}
	}
}

main = rule {
	default_action and
	default_action_redirect
}
